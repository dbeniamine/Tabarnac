{"name":"Tabarnac","tagline":"Tools to Analyse the Behavior of Applications Running on NUMA ArChitectures","body":"# What is tabarnac\r\n\r\n*TABARNAC*: Tool for Analyzing the Behavior of Applications Running on NUMA\r\nArChitecture is a set of tools and methodologies to analyse performances\r\nissues related to (NUMA) memory usage. Tabarnac consists on two parts:\r\n\r\n1.  An efficient, lock-free instrumentation to trace the memory behavior at\r\n    the granularity of the page (based on a modified version of\r\n    [numalize](https://github.com/matthiasdiener/numalize)). The\r\n    instrumentation tool is also able to retrieve data structure names, size\r\n    and address by two means:\r\n\r\n    * Binaries files are read using `libelfg0` to find statically allocated structures.\r\n    * Mallocs are traced, and structure names are (heuristically) resolved using\r\n      debug flags.\r\n\r\n2.  A set of simple yet complete visualization providing a deep understanding\r\n    of the memory usage.\r\n\r\nThe two part of the tool are completely independent therefore it is possible to\r\nrun and analyze on different machines (see [Advanced usage](#advanced-usage)).\r\n\r\nThe instrumentation is based on Intel's\r\n[Pin](https://software.intel.com/en-us/articles/pintool) library. Although Pin\r\nis designed for Intel processor, it's still work on AMD.\r\n\r\nThe visualization is generated by [R](http://cran.r-project.org/) and is able\r\nto automatically install all the R libraries required.\r\n\r\n## Installation\r\n\r\n* Install the library gelf, `lstopo` and R (on Debian\r\n `apt-get install libelfg0  hwloc r-base`, the two first are required for\r\n instrumentation only and last is for visualization only).\r\n* Install [Pin](https://software.intel.com/en-us/articles/pintool).\r\n* Download Tabarnac\r\n    git clone https://github.com/dbeniamine/Tabarnac.git\r\n\r\nEverything should work out of the box !\r\n\r\n# Usage\r\n\r\n## Instrumentation\r\n\r\nTo instrument a program and generate the visualization, simply run:\r\n\r\n    /path/to/tabarnac/tabarnac -- ./my_command my_arg0 my_arg1\r\n\r\nIt will generate 5 files and one directory:\r\n\r\n    my_command.full.pages.csv\r\n    my_command.structs.csv\r\n    my_command.stackmap.csv\r\n    my_command-plots.html\r\n    advices.html\r\n    figure/\r\n\r\nThe three first files are generated by the instrumentation and are not designed\r\nto be read by an human, it gives (respectively) the number of access per page\r\nand per threads, the addresses of the different data structures, the addresses\r\nof each stack.\r\n\r\n### Visualization\r\n\r\nThe file `my_commands-plots.html` contains the actual visualization of the\r\ntrace it consist on a set of plots coupled with explanation to ease their\r\nreading.\r\n<!--, an example trace is available [here](#Todo).-->\r\n\r\nThe first figure is the topology of the analysis machine, generated by\r\n`lstopo`.\r\n\r\nThe two following visualization show the size and the number of reads and\r\nwrites for each data structure. They aim at understanding the relative\r\nimportance of each structure and give a small insight of which kind of\r\noptimisation can be done for each structure (replication, splitting ...). A\r\ntables also shows which structures are not read (or written) by which threads,\r\nthis is useful to determine if replication is a possible optimisation.\r\n\r\nThen Tabarnac shows for each data structure the access distribution of each\r\nthread. This visualization gives a deep understanding of the data sharing\r\nbetween threads and allow the user to find a good NUMA data / thread mapping\r\nor to decide to modify this pattern.\r\n\r\nFinally as in most operating systems, memory pages are mapped near to the\r\nfirst thread accessing them (first touch), we provide for each structure a\r\nplot showing which thread is responsible of the first touch on each page. To\r\nobtain the best performances, the first touch should pattern should be\r\ncorrelated to the access distribution. If it is impossible, manual or\r\nautomatic data mapping should provide huge performances improvements.\r\n\r\n# Advanced usage\r\n\r\nIt is often easier / preferable to install avoid installing to much things on\r\nexperimental machines, therefore Tabarnac allow you to run and generate the\r\nvisualisation on different machines.\r\n\r\n## Run only\r\n\r\n\r\nTo only run the instrumentation on a machine run:\r\n\r\n    /path/to/tabarnac/tabarnac -r -- ./my_command my_arg0 my_arg1\r\n\r\nSave the `*.csv` and `topo.png`  to the machine on which you like to run the\r\nvisualization.\r\n\r\n## Visualize only\r\n\r\nTo generate the visualization, got to the directory containing the files\r\npreviously generated and run:\r\n\r\n    /path/to/tabarnac/tabarnac -p my_command\r\n\r\nA few options are available to customize the plots:\r\n\r\n    -i            Do not ignore smally used structures. This might\r\n                            produce a hard to read output\r\n    -b            Do black and white plots\r\n    -s            Save plots (png files)\r\n    -t            Disable titles in figures\r\n    -S scale      Set the scale for saved figures implies -s\r\n    -R ratio      set plots_width=ratio*plot_height, default=1\r\n\r\n# Troubleshooting\r\n\r\n## Pin installation\r\n\r\nIf pin is not installed in `/opt/pin`, you might got the following error:\r\n\r\n    /bin/sh: 1: /opt/pin: not found\r\n\r\nYou can fix it either by setting `PIN_HOME` to the pin installation path\r\n\r\n    export PIN_HOME=/path/to/pin\r\n\r\nOr by directly giving the pin path to Tabarnac:\r\n\r\n     /path/to/tabarnac/tabarnac -d /path/to/pin -- ./my_command my_arg0 my_arg1\r\n\r\n### Debug flag not present warning\r\n\r\nAlthough your application is compile with the `-g` flag, Tabarnac might show\r\nthe following warning:\r\n\r\n    Can't open file '', malloc will be anonymous\r\n    Have you compiled your program with '-g' flag ?\r\n\r\nThis happens when the application is linked to a library compiled without the\r\ndebug flags, it only means that structures allocated on the library won't be\r\nanalyzed.\r\n\r\n# Authors\r\n\r\nTabarnac is the results of an international collaboration between [Matthias\r\nDiener](http://matthiasdiener.github.io/) ([UFRGS](http://www.ufrgs.br),\r\nBrasil) and [David Beniamine](http://moais.imag.fr/membres/david.beniamine/)\r\n([Univ. Grenobles Alpes](http://www.univ-grenoble-alpes.fr/), France).\r\n\r\nWe are grateful to [CAMPUS France](http://www.campusfrance.org) who financed\r\nthis project.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}